'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Dealership")>  _
Partial Public Class VehiclesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEmployeeInfo(instance As EmployeeInfo)
    End Sub
  Partial Private Sub UpdateEmployeeInfo(instance As EmployeeInfo)
    End Sub
  Partial Private Sub DeleteEmployeeInfo(instance As EmployeeInfo)
    End Sub
  Partial Private Sub InsertVehicle(instance As Vehicle)
    End Sub
  Partial Private Sub UpdateVehicle(instance As Vehicle)
    End Sub
  Partial Private Sub DeleteVehicle(instance As Vehicle)
    End Sub
  Partial Private Sub InsertCustomerInfo(instance As CustomerInfo)
    End Sub
  Partial Private Sub UpdateCustomerInfo(instance As CustomerInfo)
    End Sub
  Partial Private Sub DeleteCustomerInfo(instance As CustomerInfo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Group_Project_Diagram.My.MySettings.Default.DealershipConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property EmployeeInfos() As System.Data.Linq.Table(Of EmployeeInfo)
		Get
			Return Me.GetTable(Of EmployeeInfo)
		End Get
	End Property
	
	Public ReadOnly Property Vehicles() As System.Data.Linq.Table(Of Vehicle)
		Get
			Return Me.GetTable(Of Vehicle)
		End Get
	End Property
	
	Public ReadOnly Property CustomerInfos() As System.Data.Linq.Table(Of CustomerInfo)
		Get
			Return Me.GetTable(Of CustomerInfo)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spDeleteVehicle")>  _
	Public Function spDeleteVehicle(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal vehicleID As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), vehicleID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spSearchVehicleYear")>  _
	Public Function spSearchVehicleYear(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal vehicleYear As String) As ISingleResult(Of Vehicle)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), vehicleYear)
		Return CType(result.ReturnValue,ISingleResult(Of Vehicle))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spSearchVehicleMake")>  _
	Public Function spSearchVehicleMake(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal make As String) As ISingleResult(Of Vehicle)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), make)
		Return CType(result.ReturnValue,ISingleResult(Of Vehicle))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spSearchVehicleModel")>  _
	Public Function spSearchVehicleModel(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal model As String) As ISingleResult(Of Vehicle)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), model)
		Return CType(result.ReturnValue,ISingleResult(Of Vehicle))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spInsertVehicle")>  _
	Public Function spInsertVehicle(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal make As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal model As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal vehicleYear As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal bodyStyle As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal color As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal vinNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal condition As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Float")> ByVal price As System.Nullable(Of Double)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), make, model, vehicleYear, bodyStyle, color, vinNumber, condition, price)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spGetCustomerInfo")>  _
	Public Function spGetCustomerInfo() As ISingleResult(Of spGetCustomerInfoResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of spGetCustomerInfoResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EmployeeInfo")>  _
Partial Public Class EmployeeInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _employeeID As Integer
	
	Private _fName As String
	
	Private _mName As String
	
	Private _lName As String
	
	Private _street As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipcode As String
	
	Private _hPhone As String
	
	Private _cPhone As String
	
	Private _vehiclesSold As System.Nullable(Of Integer)
	
	Private _isManager As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnemployeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnemployeeIDChanged()
    End Sub
    Partial Private Sub OnfNameChanging(value As String)
    End Sub
    Partial Private Sub OnfNameChanged()
    End Sub
    Partial Private Sub OnmNameChanging(value As String)
    End Sub
    Partial Private Sub OnmNameChanged()
    End Sub
    Partial Private Sub OnlNameChanging(value As String)
    End Sub
    Partial Private Sub OnlNameChanged()
    End Sub
    Partial Private Sub OnstreetChanging(value As String)
    End Sub
    Partial Private Sub OnstreetChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipcodeChanging(value As String)
    End Sub
    Partial Private Sub OnzipcodeChanged()
    End Sub
    Partial Private Sub OnhPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnhPhoneChanged()
    End Sub
    Partial Private Sub OncPhoneChanging(value As String)
    End Sub
    Partial Private Sub OncPhoneChanged()
    End Sub
    Partial Private Sub OnvehiclesSoldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnvehiclesSoldChanged()
    End Sub
    Partial Private Sub OnisManagerChanging(value As String)
    End Sub
    Partial Private Sub OnisManagerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property employeeID() As Integer
		Get
			Return Me._employeeID
		End Get
		Set
			If ((Me._employeeID = value)  _
						= false) Then
				Me.OnemployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._employeeID = value
				Me.SendPropertyChanged("employeeID")
				Me.OnemployeeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fName", DbType:="NVarChar(50)")>  _
	Public Property fName() As String
		Get
			Return Me._fName
		End Get
		Set
			If (String.Equals(Me._fName, value) = false) Then
				Me.OnfNameChanging(value)
				Me.SendPropertyChanging
				Me._fName = value
				Me.SendPropertyChanged("fName")
				Me.OnfNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mName", DbType:="NVarChar(50)")>  _
	Public Property mName() As String
		Get
			Return Me._mName
		End Get
		Set
			If (String.Equals(Me._mName, value) = false) Then
				Me.OnmNameChanging(value)
				Me.SendPropertyChanging
				Me._mName = value
				Me.SendPropertyChanged("mName")
				Me.OnmNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lName", DbType:="NVarChar(50)")>  _
	Public Property lName() As String
		Get
			Return Me._lName
		End Get
		Set
			If (String.Equals(Me._lName, value) = false) Then
				Me.OnlNameChanging(value)
				Me.SendPropertyChanging
				Me._lName = value
				Me.SendPropertyChanged("lName")
				Me.OnlNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street", DbType:="NVarChar(50)")>  _
	Public Property street() As String
		Get
			Return Me._street
		End Get
		Set
			If (String.Equals(Me._street, value) = false) Then
				Me.OnstreetChanging(value)
				Me.SendPropertyChanging
				Me._street = value
				Me.SendPropertyChanged("street")
				Me.OnstreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(50)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipcode", DbType:="NVarChar(50)")>  _
	Public Property zipcode() As String
		Get
			Return Me._zipcode
		End Get
		Set
			If (String.Equals(Me._zipcode, value) = false) Then
				Me.OnzipcodeChanging(value)
				Me.SendPropertyChanging
				Me._zipcode = value
				Me.SendPropertyChanged("zipcode")
				Me.OnzipcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hPhone", DbType:="NVarChar(50)")>  _
	Public Property hPhone() As String
		Get
			Return Me._hPhone
		End Get
		Set
			If (String.Equals(Me._hPhone, value) = false) Then
				Me.OnhPhoneChanging(value)
				Me.SendPropertyChanging
				Me._hPhone = value
				Me.SendPropertyChanged("hPhone")
				Me.OnhPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cPhone", DbType:="NVarChar(50)")>  _
	Public Property cPhone() As String
		Get
			Return Me._cPhone
		End Get
		Set
			If (String.Equals(Me._cPhone, value) = false) Then
				Me.OncPhoneChanging(value)
				Me.SendPropertyChanging
				Me._cPhone = value
				Me.SendPropertyChanged("cPhone")
				Me.OncPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vehiclesSold", DbType:="Int")>  _
	Public Property vehiclesSold() As System.Nullable(Of Integer)
		Get
			Return Me._vehiclesSold
		End Get
		Set
			If (Me._vehiclesSold.Equals(value) = false) Then
				Me.OnvehiclesSoldChanging(value)
				Me.SendPropertyChanging
				Me._vehiclesSold = value
				Me.SendPropertyChanged("vehiclesSold")
				Me.OnvehiclesSoldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isManager", DbType:="Char(10)")>  _
	Public Property isManager() As String
		Get
			Return Me._isManager
		End Get
		Set
			If (String.Equals(Me._isManager, value) = false) Then
				Me.OnisManagerChanging(value)
				Me.SendPropertyChanging
				Me._isManager = value
				Me.SendPropertyChanged("isManager")
				Me.OnisManagerChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vehicles")>  _
Partial Public Class Vehicle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vehicleID As Integer
	
	Private _make As String
	
	Private _model As String
	
	Private _vehicleYear As String
	
	Private _bodyStyle As String
	
	Private _color As String
	
	Private _vinNumber As String
	
	Private _condition As String
	
	Private _price As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnvehicleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnvehicleIDChanged()
    End Sub
    Partial Private Sub OnmakeChanging(value As String)
    End Sub
    Partial Private Sub OnmakeChanged()
    End Sub
    Partial Private Sub OnmodelChanging(value As String)
    End Sub
    Partial Private Sub OnmodelChanged()
    End Sub
    Partial Private Sub OnvehicleYearChanging(value As String)
    End Sub
    Partial Private Sub OnvehicleYearChanged()
    End Sub
    Partial Private Sub OnbodyStyleChanging(value As String)
    End Sub
    Partial Private Sub OnbodyStyleChanged()
    End Sub
    Partial Private Sub OncolorChanging(value As String)
    End Sub
    Partial Private Sub OncolorChanged()
    End Sub
    Partial Private Sub OnvinNumberChanging(value As String)
    End Sub
    Partial Private Sub OnvinNumberChanged()
    End Sub
    Partial Private Sub OnconditionChanging(value As String)
    End Sub
    Partial Private Sub OnconditionChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vehicleID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property vehicleID() As Integer
		Get
			Return Me._vehicleID
		End Get
		Set
			If ((Me._vehicleID = value)  _
						= false) Then
				Me.OnvehicleIDChanging(value)
				Me.SendPropertyChanging
				Me._vehicleID = value
				Me.SendPropertyChanged("vehicleID")
				Me.OnvehicleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_make", DbType:="NVarChar(50)")>  _
	Public Property make() As String
		Get
			Return Me._make
		End Get
		Set
			If (String.Equals(Me._make, value) = false) Then
				Me.OnmakeChanging(value)
				Me.SendPropertyChanging
				Me._make = value
				Me.SendPropertyChanged("make")
				Me.OnmakeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_model", DbType:="NVarChar(50)")>  _
	Public Property model() As String
		Get
			Return Me._model
		End Get
		Set
			If (String.Equals(Me._model, value) = false) Then
				Me.OnmodelChanging(value)
				Me.SendPropertyChanging
				Me._model = value
				Me.SendPropertyChanged("model")
				Me.OnmodelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vehicleYear", DbType:="NVarChar(50)")>  _
	Public Property vehicleYear() As String
		Get
			Return Me._vehicleYear
		End Get
		Set
			If (String.Equals(Me._vehicleYear, value) = false) Then
				Me.OnvehicleYearChanging(value)
				Me.SendPropertyChanging
				Me._vehicleYear = value
				Me.SendPropertyChanged("vehicleYear")
				Me.OnvehicleYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bodyStyle", DbType:="NVarChar(50)")>  _
	Public Property bodyStyle() As String
		Get
			Return Me._bodyStyle
		End Get
		Set
			If (String.Equals(Me._bodyStyle, value) = false) Then
				Me.OnbodyStyleChanging(value)
				Me.SendPropertyChanging
				Me._bodyStyle = value
				Me.SendPropertyChanged("bodyStyle")
				Me.OnbodyStyleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_color", DbType:="NVarChar(50)")>  _
	Public Property color() As String
		Get
			Return Me._color
		End Get
		Set
			If (String.Equals(Me._color, value) = false) Then
				Me.OncolorChanging(value)
				Me.SendPropertyChanging
				Me._color = value
				Me.SendPropertyChanged("color")
				Me.OncolorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vinNumber", DbType:="NVarChar(50)")>  _
	Public Property vinNumber() As String
		Get
			Return Me._vinNumber
		End Get
		Set
			If (String.Equals(Me._vinNumber, value) = false) Then
				Me.OnvinNumberChanging(value)
				Me.SendPropertyChanging
				Me._vinNumber = value
				Me.SendPropertyChanged("vinNumber")
				Me.OnvinNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_condition", DbType:="NVarChar(50)")>  _
	Public Property condition() As String
		Get
			Return Me._condition
		End Get
		Set
			If (String.Equals(Me._condition, value) = false) Then
				Me.OnconditionChanging(value)
				Me.SendPropertyChanging
				Me._condition = value
				Me.SendPropertyChanged("condition")
				Me.OnconditionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Float")>  _
	Public Property price() As System.Nullable(Of Double)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomerInfo")>  _
Partial Public Class CustomerInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _customerID As Integer
	
	Private _fName As String
	
	Private _mName As String
	
	Private _lName As String
	
	Private _street As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zipcode As String
	
	Private _hPhone As String
	
	Private _cPhone As String
	
	Private _wPhone As String
	
	Private _paymentType As String
	
	Private _licenseNumber As String
	
	Private _licenseExp As String
	
	Private _carWashSpecial As String
	
	Private _tradeInCredit As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncustomerIDChanged()
    End Sub
    Partial Private Sub OnfNameChanging(value As String)
    End Sub
    Partial Private Sub OnfNameChanged()
    End Sub
    Partial Private Sub OnmNameChanging(value As String)
    End Sub
    Partial Private Sub OnmNameChanged()
    End Sub
    Partial Private Sub OnlNameChanging(value As String)
    End Sub
    Partial Private Sub OnlNameChanged()
    End Sub
    Partial Private Sub OnstreetChanging(value As String)
    End Sub
    Partial Private Sub OnstreetChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipcodeChanging(value As String)
    End Sub
    Partial Private Sub OnzipcodeChanged()
    End Sub
    Partial Private Sub OnhPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnhPhoneChanged()
    End Sub
    Partial Private Sub OncPhoneChanging(value As String)
    End Sub
    Partial Private Sub OncPhoneChanged()
    End Sub
    Partial Private Sub OnwPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnwPhoneChanged()
    End Sub
    Partial Private Sub OnpaymentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnpaymentTypeChanged()
    End Sub
    Partial Private Sub OnlicenseNumberChanging(value As String)
    End Sub
    Partial Private Sub OnlicenseNumberChanged()
    End Sub
    Partial Private Sub OnlicenseExpChanging(value As String)
    End Sub
    Partial Private Sub OnlicenseExpChanged()
    End Sub
    Partial Private Sub OncarWashSpecialChanging(value As String)
    End Sub
    Partial Private Sub OncarWashSpecialChanged()
    End Sub
    Partial Private Sub OntradeInCreditChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntradeInCreditChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property customerID() As Integer
		Get
			Return Me._customerID
		End Get
		Set
			If ((Me._customerID = value)  _
						= false) Then
				Me.OncustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._customerID = value
				Me.SendPropertyChanged("customerID")
				Me.OncustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fName() As String
		Get
			Return Me._fName
		End Get
		Set
			If (String.Equals(Me._fName, value) = false) Then
				Me.OnfNameChanging(value)
				Me.SendPropertyChanging
				Me._fName = value
				Me.SendPropertyChanged("fName")
				Me.OnfNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mName", DbType:="NVarChar(50)")>  _
	Public Property mName() As String
		Get
			Return Me._mName
		End Get
		Set
			If (String.Equals(Me._mName, value) = false) Then
				Me.OnmNameChanging(value)
				Me.SendPropertyChanging
				Me._mName = value
				Me.SendPropertyChanged("mName")
				Me.OnmNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property lName() As String
		Get
			Return Me._lName
		End Get
		Set
			If (String.Equals(Me._lName, value) = false) Then
				Me.OnlNameChanging(value)
				Me.SendPropertyChanging
				Me._lName = value
				Me.SendPropertyChanged("lName")
				Me.OnlNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street", DbType:="NVarChar(50)")>  _
	Public Property street() As String
		Get
			Return Me._street
		End Get
		Set
			If (String.Equals(Me._street, value) = false) Then
				Me.OnstreetChanging(value)
				Me.SendPropertyChanging
				Me._street = value
				Me.SendPropertyChanged("street")
				Me.OnstreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="NVarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="NVarChar(50)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipcode", DbType:="NVarChar(50)")>  _
	Public Property zipcode() As String
		Get
			Return Me._zipcode
		End Get
		Set
			If (String.Equals(Me._zipcode, value) = false) Then
				Me.OnzipcodeChanging(value)
				Me.SendPropertyChanging
				Me._zipcode = value
				Me.SendPropertyChanged("zipcode")
				Me.OnzipcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hPhone", DbType:="NVarChar(50)")>  _
	Public Property hPhone() As String
		Get
			Return Me._hPhone
		End Get
		Set
			If (String.Equals(Me._hPhone, value) = false) Then
				Me.OnhPhoneChanging(value)
				Me.SendPropertyChanging
				Me._hPhone = value
				Me.SendPropertyChanged("hPhone")
				Me.OnhPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cPhone", DbType:="NVarChar(50)")>  _
	Public Property cPhone() As String
		Get
			Return Me._cPhone
		End Get
		Set
			If (String.Equals(Me._cPhone, value) = false) Then
				Me.OncPhoneChanging(value)
				Me.SendPropertyChanging
				Me._cPhone = value
				Me.SendPropertyChanged("cPhone")
				Me.OncPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wPhone", DbType:="NVarChar(50)")>  _
	Public Property wPhone() As String
		Get
			Return Me._wPhone
		End Get
		Set
			If (String.Equals(Me._wPhone, value) = false) Then
				Me.OnwPhoneChanging(value)
				Me.SendPropertyChanging
				Me._wPhone = value
				Me.SendPropertyChanged("wPhone")
				Me.OnwPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_paymentType", DbType:="Char(10)")>  _
	Public Property paymentType() As String
		Get
			Return Me._paymentType
		End Get
		Set
			If (String.Equals(Me._paymentType, value) = false) Then
				Me.OnpaymentTypeChanging(value)
				Me.SendPropertyChanging
				Me._paymentType = value
				Me.SendPropertyChanged("paymentType")
				Me.OnpaymentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseNumber", DbType:="NVarChar(50)")>  _
	Public Property licenseNumber() As String
		Get
			Return Me._licenseNumber
		End Get
		Set
			If (String.Equals(Me._licenseNumber, value) = false) Then
				Me.OnlicenseNumberChanging(value)
				Me.SendPropertyChanging
				Me._licenseNumber = value
				Me.SendPropertyChanged("licenseNumber")
				Me.OnlicenseNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenseExp", DbType:="NVarChar(50)")>  _
	Public Property licenseExp() As String
		Get
			Return Me._licenseExp
		End Get
		Set
			If (String.Equals(Me._licenseExp, value) = false) Then
				Me.OnlicenseExpChanging(value)
				Me.SendPropertyChanging
				Me._licenseExp = value
				Me.SendPropertyChanged("licenseExp")
				Me.OnlicenseExpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_carWashSpecial", DbType:="Char(4)")>  _
	Public Property carWashSpecial() As String
		Get
			Return Me._carWashSpecial
		End Get
		Set
			If (String.Equals(Me._carWashSpecial, value) = false) Then
				Me.OncarWashSpecialChanging(value)
				Me.SendPropertyChanging
				Me._carWashSpecial = value
				Me.SendPropertyChanged("carWashSpecial")
				Me.OncarWashSpecialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tradeInCredit", DbType:="Int")>  _
	Public Property tradeInCredit() As System.Nullable(Of Integer)
		Get
			Return Me._tradeInCredit
		End Get
		Set
			If (Me._tradeInCredit.Equals(value) = false) Then
				Me.OntradeInCreditChanging(value)
				Me.SendPropertyChanging
				Me._tradeInCredit = value
				Me.SendPropertyChanged("tradeInCredit")
				Me.OntradeInCreditChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class spGetCustomerInfoResult
	
	Private _customerID As Integer
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerID", DbType:="Int NOT NULL")>  _
	Public Property customerID() As Integer
		Get
			Return Me._customerID
		End Get
		Set
			If ((Me._customerID = value)  _
						= false) Then
				Me._customerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(101) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class
